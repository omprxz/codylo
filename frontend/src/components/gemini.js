import React, {
  useState,
  useEffect
} from 'react'
import axios from 'axios';
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold
} from "@google/generative-ai";

const Gemini = async (parts, geminiErr=0, setErrorCode, setResultsVisib, handleChunk, model = "gemini-1.5-flash") => {
  const gemini_api = process.env.REACT_APP_GEMINI_API
  const genAI = new GoogleGenerativeAI(gemini_api);
    const generationConfig = {
      temperature: 1,
      topP: 0.95,
      topK: 64,
      maxOutputTokens: 8000,
      responseMimeType: "text/plain",
    };

    try {
      const result = await genAI.getGenerativeModel({
        model: model,
        generationConfig,
        harmCategory: HarmCategory.NONE,
        harmBlockThreshold: HarmBlockThreshold.LOW
      }).generateContentStream({
        contents: [{
          role: "user", parts
        }]
      });
      let chunkTextAdd = '';
      setResultsVisib(true)
      for await (const chunk of result.stream){
      const chunkText = chunk.text()
      chunkTextAdd += chunk.text()
      console.log(chunk.text());
      handleChunk(chunkText)
    }

      let generatedCode = await result.response;
      generatedCode = generatedCode.text();
      return generatedCode;
    } catch (error) {
      console.log('Gemini Error: ', error)
      if (error.status === 429) {
        try {
          const result = await genAI.getGenerativeModel({
            model: "gemini-1.0-pro",
          }).generateContentSream({
            contents: [{
              role: "user", parts
            }],
            generationConfig,
            harmCategory: HarmCategory.NONE,
            harmBlockThreshold: HarmBlockThreshold.LOW,
          });

          const generatedCode = result.response.text();
          console.log("Generated by 1.0 pro")
          return generatedCode;
        } catch (error) {
          console.log('Gemini Error: ', error)
          geminiErr = 1
          setErrorCode(true)
          return 'Error generating code: '+error.message.replace("[GoogleGenerativeAI Error]:", "")
        }
      }
      geminiErr = 1
      setErrorCode(true)
      return 'Error generating code: '+error.message.replace("[GoogleGenerativeAI Error]:", "")
    }
  
  
}

export default Gemini;