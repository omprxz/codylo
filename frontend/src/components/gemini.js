import React, {
  useState,
  useEffect
} from 'react'
import axios from 'axios';
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold
} from "@google/generative-ai";

const Gemini = async (parts, geminiErr=0, setErrorCode, setResultsVisib, handleChunk, scroll, model = "gemini-1.5-flash") => {
  const gemini_api = process.env.REACT_APP_GEMINI_API
  const genAI = new GoogleGenerativeAI(gemini_api);
  const generationConfig = {
      temperature: 0.5,
      topP: 0.6,
      topK: 50,
      maxOutputTokens: 10000,
      responseMimeType: "text/plain",
    };
  const scrollDown = (px) => {
    window.scrollBy({
      top: px,
      behavior: 'smooth'
    });
  };
    try {
      const result = await genAI.getGenerativeModel({
    model: model,
    generationConfig,
    safetySettings: [
        {
            category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
            threshold: 'BLOCK_NONE'
        }
    ]
}).generateContentStream({
        contents: [{
          role: "user", parts
        }]
      });
      setResultsVisib(true)
      let scrollStop = 0;
      for await (const chunk of result.stream){
      const chunkText = chunk.text()
      handleChunk(chunkText)
      
      if(scroll && (scrollStop % 5 == 0) && scrollStop <= 20){
        scrollDown(100)
      }
      scrollStop++
    }

      let generatedCode = await result.response;
      generatedCode = generatedCode.text();
      return generatedCode;
    } catch (error) {
      console.log('Gemini Error: ', error)
      if (error.status === 429) {
        try {
          const result = await genAI.getGenerativeModel({
            model: "gemini-1.0-pro",
            generationConfig,
            safetySettings: [
        {
            category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_HATE_SPEECH',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_HARASSMENT',
            threshold: 'BLOCK_NONE'
        },
        {
            category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
            threshold: 'BLOCK_NONE'
        }
    ]
          }).generateContentSream({
            contents: [{
              role: "user", parts
            }]
          });
          
      setResultsVisib(true)
      let scrollStop = 0;
      for await (const chunk of result.stream){
      const chunkText = chunk.text()
      handleChunk(chunkText)
      if(scroll && scrollStop <= 10){
        scrollDown(50)
        scrollStop++
      }
    }

      let generatedCode = await result.response;
      generatedCode = generatedCode.text();
          console.log("Generated by 1.0 pro")
      return generatedCode;
        } catch (error) {
          console.log('Gemini Error: ', error)
          geminiErr = 1
          setErrorCode(true)
          return 'Error generating code: '+error.message.replace("[GoogleGenerativeAI Error]:", "")
        }
      }
      geminiErr = 1
      setErrorCode(true)
      return 'Error generating code: '+error.message.replace("[GoogleGenerativeAI Error]:", "")
    }
  
  
}

export default Gemini;